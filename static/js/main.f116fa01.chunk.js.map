{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Counter","props","handleClick","setState","number","state","console","log","nextProps","nextState","this","n","onClick","React","Component","defaultProps","name","ChildCounter","newProps","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,kC,qMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICXAC,E,YAIF,WAAYC,GAAO,IAAD,8BAChB,+CAUFC,YAAY,WACV,EAAKC,SAAS,CAACC,OAAO,EAAKC,MAAMD,OAAO,KAVxC,EAAKC,MAAQ,CAACD,OAAO,GACrBE,QAAQC,IAAI,yCAHI,E,kFAMhBD,QAAQC,IAAI,+D,0CAGZD,QAAQC,IAAI,8D,4CAMQC,EAAUC,GAE9B,OADAH,QAAQC,IAAI,gEACLE,EAAUL,OAAO,I,4CAIxBE,QAAQC,IAAI,gE,2CAGZD,QAAQC,IAAI,+D,+BAIZ,OADAD,QAAQC,IAAI,YAEV,6BACE,2BAAIG,KAAKL,MAAMD,QACdM,KAAKL,MAAMD,OAAO,EAAE,KAAK,kBAAC,EAAD,CAAcO,EAAGD,KAAKL,MAAMD,SACtD,4BAAQQ,QAASF,KAAKR,aAAtB,U,GApCYW,IAAMC,WAAtBd,EACKe,aAAe,CACpBC,KAAK,4B,IAuCHC,E,+LAEFX,QAAQC,IAAI,gF,2CAGZD,QAAQC,IAAI,yC,+BAIZ,OADAD,QAAQC,IAAI,0BACJ,6BACLG,KAAKT,MAAMU,K,0CAIdL,QAAQC,IAAI,yC,gDAEYW,GACxBZ,QAAQC,IAAI,gD,4CAEQC,EAAUC,GAC9B,OAAOD,EAAUG,EAAE,GAAG,M,GApBCG,aAuB7BK,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD4D/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f116fa01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {\n    Component\n} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nclass Counter extends React.Component{ // 他会比较两个状态相等就不会刷新视图 PureComponent是浅比较\n    static defaultProps = {\n      name:'珠峰培训'\n    };\n    constructor(props){\n      super();\n      this.state = {number:0}\n      console.log('1.constructor构造函数')\n    }\n    componentWillMount(){ // 取本地的数据 同步的方式：采用渲染之前获取数据，只渲染一次\n      console.log('2.组件将要加载 componentWillMount');\n    }\n    componentDidMount(){\n      console.log('4.组件挂载完成 componentDidMount');\n    }\n    handleClick=()=>{\n      this.setState({number:this.state.number+1});\n    };\n    // react可以shouldComponentUpdate方法中优化 PureComponent 可以帮我们做这件事\n    shouldComponentUpdate(nextProps,nextState){ // 代表的是下一次的属性 和 下一次的状态\n      console.log('5.组件是否更新 shouldComponentUpdate');\n      return nextState.number%2;\n      // return nextState.number!==this.state.number; //如果此函数种返回了false 就不会调用render方法了\n    } //不要随便用setState 可能会死循环\n    componentWillUpdate(){\n      console.log('6.组件将要更新 componentWillUpdate');\n    }\n    componentDidUpdate(){\n      console.log('7.组件完成更新 componentDidUpdate');\n    }\n    render(){\n      console.log('3.render');\n      return (\n        <div>\n          <p>{this.state.number}</p>\n          {this.state.number>3?null:<ChildCounter n={this.state.number}/>}\n          <button onClick={this.handleClick}>+</button>\n        </div>\n      )\n    }\n  }\n  class ChildCounter extends Component{\n    componentWillUnmount(){\n      console.log('@@@@@@@@@ child## 组件将要卸载componentWillUnmount')\n    }\n    componentWillMount(){\n      console.log('@@@@@@@@ child## componentWillMount')\n    }\n    render(){\n      console.log('@@@@@@@ child-render##')\n      return (<div>\n        {this.props.n}\n      </div>)\n    }\n    componentDidMount(){\n      console.log('@@@@@@@@@ child## componentDidMount')\n    }\n    componentWillReceiveProps(newProps){ // 第一次不会执行，之后属性更新时才会执行\n      console.log('@@@@@@@@ child## componentWillReceiveProps')\n    }\n    shouldComponentUpdate(nextProps,nextState){\n      return nextProps.n%3==0; //子组件判断接收的属性 是否满足更新条件 为true则更新\n    }\n  }\nReactDOM.render(<Counter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}